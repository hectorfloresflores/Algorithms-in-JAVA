package com.leetcode;

/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 *
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 *
 *
 * Example 1:
 *
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 * Example 2:
 *
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 * Example 3:
 *
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 * Remove palindromic subsequence "baab" then "b".
 * Example 4:
 *
 * Input: s = ""
 * Output: 0
 *
 *
 * Constraints:
 *
 * 0 <= s.length <= 1000
 * s only consists of letters 'a' and 'b'
 */

public class RemovePalindromicSubsequences {

    public static int solution(String s) {

        StringBuilder sb = new StringBuilder(s);

        int[] countLeftRight;
        int steps = 0;

        while (sb.length() != 0) {
            int count = 0, left = 0, right = 0;
            for (int i = 0; i < sb.length(); i++) {
                countLeftRight = expandPalindromeInPos(sb, i);
                if (countLeftRight[0] > count) {
                    count = countLeftRight[0];
                    left = countLeftRight[1];
                    right = countLeftRight[2];
                }
            }

            sb.delete(left, right+1);
            steps++;
        }
        return steps;


    }

    private static int[] expandPalindromeInPos(StringBuilder sb, int pos) {
        int count = 0;
        int[] countLeftRight = new int[3];
        countLeftRight[1] = pos;
        countLeftRight[2] = pos;
        if (sb == null && sb.length() == 1) {
            countLeftRight[0] = ++count;
            return countLeftRight;
        }

        if (sb.length() == 0) {
            countLeftRight[0] = ++count;
            return countLeftRight;
        }


        int left = pos, right = pos;
        left--;
        right++;
        boolean flag = false;
        while (true) {


            if (left >= 0 && right <= sb.length() -1 && sb.charAt(left) == sb.charAt(right)) {
                countLeftRight[1] = left--;
                countLeftRight[2] = right++;
                count += 2;
                countLeftRight[0] = count;

                continue;
            }

            if (left >= 0 && right <= sb.length() && sb.charAt(left) == sb.charAt(pos) && !flag) {
                flag = true;
                countLeftRight[1] = left;
                countLeftRight[2] = pos;
                countLeftRight[0] = ++count;
                left--;
                continue;
            }

            break;

        }


        return countLeftRight;

    }

    public static void main(String[] args) {
        System.out.println(RemovePalindromicSubsequences.solution("ababbaaaaabaa"));

        StringBuilder sb = new StringBuilder("esta es una prueba");
        sb.delete(2,6);
        System.out.println(sb.toString());
    }
}
